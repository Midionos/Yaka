/*
 * @author Paul Chaignon
 * @author Damien Le Guen
 * @author Antoine Lejeune
 * @author Benoit Travers
 *
 */
options
{
  JDK_VERSION = "1.5";
}

PARSER_BEGIN(Yaka)

package compilateur;

public class Yaka {
  public static Declaration declaration;
  public static Expression expression;
  public static Iteration iteration;
  public static TabIdent tabIdent;
  public static Function function;
  public static YVM yvm;
  public static InputOutput inputOutput;
  public static Condition condition;

  public static void initVariables(boolean toYVM) {
	  if(toYVM) {		yvm = new YVM();
	  } else {
	    yvm = new YVMasm();
	  }
      tabIdent = new TabIdent(10);
  	  iteration = new Iteration();
  	  declaration = new Declaration();
      expression = new Expression();
      inputOutput = new InputOutput();
      condition = new Condition();
      function = new Function();
  }
  
  public static void main(String args []) {
    java.io.InputStream input;
    java.io.InputStream inputASM;
    if(args.length == 1) {
      System.out.print(args [args.length - 1] + ": ");
      try {
        input = new java.io.FileInputStream(args [args.length - 1] + ".yaka");
        inputASM = new java.io.FileInputStream(args [args.length - 1] + ".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length == 0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
      inputASM = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      // Generation YVM
      new Yaka(input);
	  Yaka.initVariables(true);
      Yaka.analyse();
      System.out.println("analyse syntaxique YVM reussie!");
      Yaka.yvm.generateFile("test.yvm");
      
      // Generation ASM
      Yaka.ReInit(inputASM);
	  Yaka.initVariables(false);
      Yaka.analyse();
      System.out.println("analyse syntaxique ASM reussie!");
      Yaka.yvm.generateFile("test.asm");
      
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0, msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : " + msg);
    }
  }
}

PARSER_END(Yaka)

/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/
TOKEN_MGR_DECLS :
{
  public static String identLu, chaineLue;
  public static int entierLu;
  public static Type typeLu;
}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*" : IN_COMMENT
}

< IN_COMMENT >
MORE :
{
  < ~[ ] >
}

< IN_COMMENT >
SKIP :
{
  < "*)" >
  {
    SwitchTo(DEFAULT);
  }
}

/* Mots reserves*/
TOKEN :
{
  < BOOLEEN : "BOOLEEN" >
| < VAR : "VAR" >
| < FAIRE : "FAIRE" >
| < SINON : "SINON" >
| < POUR : "POUR" >
| < SI : "SI" >
| < FSI : "FSI" >
| < ENTIER : "ENTIER" >
| < RETOURNE : "RETOURNE" >
| < VRAI : "VRAI" >
| < TANTQUE : "TANTQUE" >
| < CONST : "CONST" >
| < FAUX : "FAUX" >
| < FAIT : "FAIT" >
| < OU : "OU" >
| < ET : "ET" >
| < NON : "NON" >
| < FONCTION : "FONCTION" >
| < FFONCTION : "FFONCTION" >
| < PROGRAMME : "PROGRAMME" >
| < FPROGRAMME : "FPROGRAMME" >
| < PRINCIPAL : "PRINCIPAL" >
| < FPRINCIPAL : "FPRINCIPAL" >
| < ALORS : "ALORS" >
| < ECRIRE : "ECRIRE" >
| < LIRE : "LIRE" >
| < ALALIGNE : "ALALIGNE" >
}

/*** unites de base nombres, idents,  strings ***/
TOKEN :
{
  < #chiffre : [ "0"-"9" ] >
| < entier : (< chiffre >)+ >
  {
    entierLu = Integer.parseInt(image.toString());
  }
| < #lettre : [ "A"-"Z", "a"-"z" ] >
| < ident :
    < lettre >
    (
      < lettre >
    | < chiffre >
    )* >
  {
    identLu = image.toString();
  }
| < chaine :
    "\"" (~[ "\"" ])* "\""
  | "'" (~[ "'" ])* "'" >
  {
    chaineLue = image.toString();
  }
}

/**************************************/
/********debut de la grammaire ********/
/**************************************/

/******** Main ********/
void analyse() : {}	{
  < PROGRAMME > {Yaka.yvm.entete();}
  < ident >
  (declFonction())*
  < PRINCIPAL > {Yaka.yvm.label("main");}
  bloc()
  < FPRINCIPAL >
  < FPROGRAMME > {Yaka.yvm.queue();}
}

void bloc() : {} {
  (
    (declConst())*
    (declVar())*
  ) {declaration.bookMemory();}
  suiteInstr()
}

/******** Definitions ********/
void declConst() : {} {
  < CONST > defConst()
  ("," defConst())*
  ";"
}

void defConst() : {} {
  < ident > {declaration.defConst(YakaTokenManager.identLu);}
  "=" valConst()
}

void valConst() : {} {
  < entier > {declaration.valConst(Type.INT, YakaTokenManager.entierLu);}
| < ident > {declaration.valConstRef(YakaTokenManager.identLu);}
| < VRAI > {declaration.valConst(Type.BOOL, Constants.TRUE);}
| < FAUX > {declaration.valConst(Type.BOOL, Constants.FALSE);}
}

void declVar() : {} {
  < VAR > type() {declaration.declVar(YakaTokenManager.typeLu);}
  < ident > {declaration.defVar(YakaTokenManager.identLu);}
  ("," < ident > {declaration.defVar(YakaTokenManager.identLu);} )* ";"
}

void type() : {} {
  < ENTIER > {YakaTokenManager.typeLu = Type.INT;}
| < BOOLEEN > {YakaTokenManager.typeLu = Type.BOOL;}
}

	
/******** Expression ********/
void expression() : {} {
  simpleExpr()
  (opRel() simpleExpr() {Yaka.expression.compute();})?
}

void simpleExpr() : {} {
  terme()
  (opAdd() terme() {Yaka.expression.compute();})*
}

void terme() : {} {
  facteur()
  (opMul() facteur() {Yaka.expression.compute();})*
}

void facteur() : {} {
  primaire()
| opNeg() {Yaka.expression.invert();}
  primaire()
}

void primaire() : {} {
  valeur()
| "(" expression() ")"
}

void valeur() : {} {
  < entier > {Yaka.expression.pushInteger(YakaTokenManager.entierLu);}
| < ident > (argumentsFonction() | {Yaka.expression.pushIdent(YakaTokenManager.identLu);})
| < VRAI > {Yaka.expression.pushBoolean(Constants.TRUE);}
| < FAUX > {Yaka.expression.pushBoolean(Constants.FALSE);}
}

void opRel() : {} {
  "=" {Yaka.expression.pushOperator(Operator.EQUAL);}
| "<>" {Yaka.expression.pushOperator(Operator.DIFF);}
| "<" {Yaka.expression.pushOperator(Operator.LT);}
| "<=" {Yaka.expression.pushOperator(Operator.LTE);}
| ">" {Yaka.expression.pushOperator(Operator.GT);}
| ">=" {Yaka.expression.pushOperator(Operator.GTE);}
}

void opAdd() : {} {
  "+" {Yaka.expression.pushOperator(Operator.ADD);}
| "-" {Yaka.expression.pushOperator(Operator.SUB);}
| < OU > {Yaka.expression.pushOperator(Operator.OR);}
}

void opMul() : {} {
  "*" {Yaka.expression.pushOperator(Operator.MUL);}
| "/" {Yaka.expression.pushOperator(Operator.DIV);}
| < ET > {Yaka.expression.pushOperator(Operator.AND);}
}

void opNeg() : {} {
  "-" {Yaka.expression.pushOperator(Operator.NEG);}
| < NON > {Yaka.expression.pushOperator(Operator.NOT);}
}


/******** Affectation ********/
void suiteInstr() : {} {	instruction()	(	  ";"
	  (instruction())?	)*
}

void instruction() : {} {
  affectation() | lecture() | ecriture() | iteration() | conditionnel() | retourne()}

void affectation() : {} {  < ident > {Yaka.expression.setAffectation(YakaTokenManager.identLu);}
   "="
   expression() {Yaka.expression.affectation();}}

/******** Reading ********/
void lecture() : {} {
  < LIRE > "(" < ident > ")" {Yaka.inputOutput.read(YakaTokenManager.identLu);}}
/******** Writing ********/
void ecriture() : {} {
  < ECRIRE > "("
  (
    expression() {Yaka.inputOutput.writeInteger();}
  	| < chaine > {Yaka.inputOutput.writeString(YakaTokenManager.chaineLue);}
  )
  ")"
  | < ALALIGNE > {Yaka.inputOutput.newLine();}}

/******** Iteration ********/
void iteration() : {} {	< TANTQUE > {Yaka.iteration.tantQue();}
	expression() {Yaka.iteration.checkExpression();}
	< FAIRE > {Yaka.iteration.faire();}
	suiteInstr()
	< FAIT > {Yaka.iteration.fait();}
}

/******** Conditional ********/
void conditionnel() : {} {
	< SI >
	expression() {Yaka.condition.checkExpression();}
	< ALORS > {Yaka.condition.alors();}
	suiteInstr()
	{Yaka.condition.sinon();}
	(
	  < SINON >
	  suiteInstr()
	)?
	< FSI > {Yaka.condition.fsi();}
}

/******** Functions ********/

void declFonction() : {} {
	type()
	< FONCTION >
	< ident > {Yaka.function.declarFunction(YakaTokenManager.identLu, YakaTokenManager.typeLu);}
	paramForms()
	bloc()
	< FFONCTION > {Yaka.function.endFunction();}
}

void paramForms() : {} {
	"("	(		paramForm()
		("," paramForm())*
	)?
	")" {Yaka.function.computeOffsets();}
}

void paramForm() : {} {
	type() {Yaka.function.addTypeParameter(YakaTokenManager.typeLu);}
	< ident > {Yaka.function.addParameter(YakaTokenManager.identLu);}
}

void retourne() : {} {
	< RETOURNE >
	expression() {
	  Yaka.function.checkReturnedType();
	  Yaka.function.returnValue();
	}
}

void argumentsFonction() : {} {
	"(" {Yaka.function.prepareCallFunction(YakaTokenManager.identLu);}
	(
		expression() {Yaka.function.checkParameter();}
		("," expression() {Yaka.function.checkParameter();})*
	)?
	")" {Yaka.function.callFunction();}
}